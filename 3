import React, { useState, useEffect } from 'react';
import axios from 'axios';
import Box from '@mui/material/Box';

const ITEMS_PER_PAGE = 10;

const InfiniteScrollDataDisplay = () => {
  const [data, setData] = useState([]);
  const [currentPage, setCurrentPage] = useState(1);
  const [isLoading, setIsLoading] = useState(false);
  const [hasMore, setHasMore] = useState(true);

  const fetchData = async (page) => {
    try {
      setIsLoading(true);
      const response = await axios.get(`https://api.example.com/data?page=${page}`);
      if (response.data.length === 0) {
        setHasMore(false);
      } else {
        setData((prevData) => [...prevData, ...response.data]);
        setCurrentPage((prevPage) => prevPage + 1);
      }
      setIsLoading(false);
    } catch (error) {
      console.error('Error fetching data:', error);
      setIsLoading(false);
    }
  };

  const handleScroll = () => {
    if (hasMore && !isLoading) {
      const scrollTop = document.documentElement.scrollTop || document.body.scrollTop;
      const scrollHeight = document.documentElement.scrollHeight || document.body.scrollHeight;
      const clientHeight = document.documentElement.clientHeight;

      if (scrollHeight - scrollTop === clientHeight) {
        fetchData(currentPage);
      }
    }
  };

  useEffect(() => {
    fetchData(currentPage);
  }, []);

  useEffect(() => {
    window.addEventListener('scroll', handleScroll);
    return () => {
      window.removeEventListener('scroll', handleScroll);
    };
  }, [hasMore, isLoading]);

  return (
    <Box>
      {/* Render your data using the data array */}
      <ul>
        {data.map((item) => (
          <li key={item.id}>{item.name}</li>
        ))}
      </ul>

      {/* Show a loading indicator while fetching data */}
      {isLoading && <div>Loading...</div>}
    </Box>
  );
};

export default InfiniteScrollDataDisplay;
